{{!-- Patient Profile --}}
<div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-8">
            <h2 class="text-2xl font-semibold mb-6">My Profile</h2>
            
            <form id="profile-form">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                        <input type="text" id="name" name="name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.displayName}}" required>
                    </div>
                    
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                        <input type="email" id="email" name="email" class="w-full px-3 py-2 border border-gray-300 bg-gray-100 rounded-md" value="{{user.email}}" readonly>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number (Optional)</label>
                        <input type="tel" id="phone" name="phone" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.phone}}">
                    </div>
                    
                    <div>
                        <label for="birthdate" class="block text-sm font-medium text-gray-700 mb-1">Date of Birth (Optional)</label>
                        <input type="date" id="birthdate" name="birthdate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.birthdate}}">
                    </div>
                </div>
                
                <div id="success-message" class="mb-4 text-green-600 text-sm hidden">Profile updated successfully!</div>
                <div id="error-message" class="mb-4 text-red-600 text-sm hidden"></div>
                
                <div class="flex justify-end">
                    <button type="submit" class="bg-health-600 text-white py-2 px-6 rounded-md hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-health-500 focus:ring-offset-2">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="bg-white rounded-xl shadow-md overflow-hidden mt-8">
        <div class="p-8">
            <h2 class="text-2xl font-semibold mb-6">Password Change</h2>
            
            <form id="password-form">
                <div class="grid grid-cols-1 gap-6 mb-6">
                    <div>
                        <label for="current-password" class="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
                        <input type="password" id="current-password" name="currentPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                    
                    <div>
                        <label for="new-password" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                        <input type="password" id="new-password" name="newPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                    
                    <div>
                        <label for="confirm-new-password" class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                        <input type="password" id="confirm-new-password" name="confirmNewPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                </div>
                
                <div id="password-success-message" class="mb-4 text-green-600 text-sm hidden">Password updated successfully!</div>
                <div id="password-error-message" class="mb-4 text-red-600 text-sm hidden"></div>
                
                <div class="flex justify-end">
                    <button type="submit" class="bg-health-600 text-white py-2 px-6 rounded-md hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-health-500 focus:ring-offset-2">Update Password</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="module">
    import { getAuth, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    
    // Fetch user profile data when the page loads
    window.addEventListener('load', () => {
        window.fetchUserProfile();
    });
    
    // Profile Update Form
    const profileForm = document.getElementById('profile-form');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    
    profileForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const name = document.getElementById('name').value;
        const phone = document.getElementById('phone').value;
        const birthdate = document.getElementById('birthdate').value;
        
        try {
            await window.updateProfile(name, phone, birthdate);
            successMessage.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            
            // Hide success message after 3 seconds
            setTimeout(() => {
                successMessage.classList.add('hidden');
            }, 3000);
        } catch (error) {
            errorMessage.textContent = error.message;
            errorMessage.classList.remove('hidden');
            successMessage.classList.add('hidden');
        }
    });
    
    // Password Change Form
    const passwordForm = document.getElementById('password-form');
    const passwordSuccessMessage = document.getElementById('password-success-message');
    const passwordErrorMessage = document.getElementById('password-error-message');
    
    passwordForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const currentPassword = document.getElementById('current-password').value;
        const newPassword = document.getElementById('new-password').value;
        const confirmNewPassword = document.getElementById('confirm-new-password').value;
        
        // Validate passwords
        if (newPassword !== confirmNewPassword) {
            passwordErrorMessage.textContent = "New passwords don't match";
            passwordErrorMessage.classList.remove('hidden');
            return;
        }
        
        if (newPassword.length < 6) {
            passwordErrorMessage.textContent = "Password must be at least 6 characters";
            passwordErrorMessage.classList.remove('hidden');
            return;
        }
        
        try {
            const auth = getAuth();
            const user = auth.currentUser;
            
            if (!user) {
                // Not logged in
                window.location.href = '/login';
                return;
            }
            
            // Re-authenticate user before changing password
            const credential = EmailAuthProvider.credential(user.email, currentPassword);
            await reauthenticateWithCredential(user, credential);
            
            // Update password
            await updatePassword(user, newPassword);
            
            // Success
            passwordSuccessMessage.classList.remove('hidden');
            passwordErrorMessage.classList.add('hidden');
            passwordForm.reset();
            
            // Hide success message after 3 seconds
            setTimeout(() => {
                passwordSuccessMessage.classList.add('hidden');
            }, 3000);
        } catch (error) {
            passwordErrorMessage.textContent = error.message;
            passwordErrorMessage.classList.remove('hidden');
            passwordSuccessMessage.classList.add('hidden');
        }
    });
</script> 