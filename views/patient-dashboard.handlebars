{{!-- Patient Dashboard --}}
<div class="container mx-auto px-4 py-8">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold">Patient Dashboard</h1>
    <div class="flex items-center space-x-4">
      <span class="text-gray-600">Welcome, {{user.displayName}}</span>
      <a href="/profile" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">Profile</a>
    </div>
  </div>

  {{!-- Upload Documents Section --}}
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <h2 class="text-xl font-semibold mb-4">Upload Documents</h2>
    <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center" 
         id="dropZone">
      <p class="text-gray-600 mb-4">Drag and drop your medical documents here</p>
      <p class="text-sm text-gray-500 mb-4">or</p>
      <input type="file" id="fileInput" class="hidden" multiple 
             accept=".pdf,.jpg,.jpeg,.png">
      <button onclick="document.getElementById('fileInput').click()" 
              class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded">
        Browse Files
      </button>
      <p class="text-sm text-gray-500 mt-4">
        Supported formats: PDF, JPG, PNG (Max size: 10MB)
      </p>
    </div>
    <div id="uploadProgress" class="mt-4 hidden">
      <div class="w-full bg-gray-200 rounded-full h-2.5">
        <div class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
      </div>
      <p class="text-sm text-gray-600 mt-2" id="uploadStatus"></p>
    </div>
  </div>

  {{!-- My Documents Section --}}
  <div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-semibold">My Documents</h2>
      <div class="flex space-x-4">
        <input type="text" id="documentSearch" placeholder="Search documents" 
               class="border rounded px-4 py-2">
        <select id="documentFilter" class="border rounded px-4 py-2">
          <option value="all">All Documents</option>
          <option value="endorsed">Endorsed</option>
          <option value="flagged">Flagged</option>
        </select>
      </div>
    </div>
    <div id="documentsList" class="space-y-4">
      {{!-- Documents will be loaded here --}}
    </div>
  </div>
</div>

<script>
// Initialize drag and drop functionality
const dropZone = document.getElementById('dropZone');
const fileInput = document.getElementById('fileInput');
const uploadProgress = document.getElementById('uploadProgress');
const progressBar = uploadProgress.querySelector('.bg-blue-600');
const uploadStatus = document.getElementById('uploadStatus');
const documentsList = document.getElementById('documentsList');
const documentSearch = document.getElementById('documentSearch');
const documentFilter = document.getElementById('documentFilter');

// Load documents on page load
document.addEventListener('DOMContentLoaded', loadDocuments);

// Handle file selection
fileInput.addEventListener('change', handleFiles);

// Handle drag and drop
dropZone.addEventListener('dragover', (e) => {
  e.preventDefault();
  dropZone.classList.add('border-blue-500');
});

dropZone.addEventListener('dragleave', () => {
  dropZone.classList.remove('border-blue-500');
});

dropZone.addEventListener('drop', (e) => {
  e.preventDefault();
  dropZone.classList.remove('border-blue-500');
  handleFiles({ target: { files: e.dataTransfer.files } });
});

// Function to handle file uploads
async function handleFiles(event) {
  const files = event.target.files;
  if (!files.length) return;

  uploadProgress.classList.remove('hidden');
  progressBar.style.width = '0%';
  uploadStatus.textContent = 'Uploading...';

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    if (file.size > 10 * 1024 * 1024) {
      alert('File size exceeds 10MB limit');
      continue;
    }

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('/api/documents/upload', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) throw new Error('Upload failed');

      const progress = ((i + 1) / files.length) * 100;
      progressBar.style.width = `${progress}%`;
      uploadStatus.textContent = `Uploaded ${i + 1} of ${files.length} files`;
    } catch (error) {
      console.error('Error uploading file:', error);
      alert(`Error uploading ${file.name}`);
    }
  }

  uploadStatus.textContent = 'Upload complete';
  setTimeout(() => {
    uploadProgress.classList.add('hidden');
    loadDocuments();
  }, 2000);
}

// Function to load documents
async function loadDocuments() {
  try {
    const response = await fetch('/api/documents/user-documents');
    const documents = await response.json();
    
    documentsList.innerHTML = '';
    
    if (documents.length === 0) {
      documentsList.innerHTML = '<p class="text-gray-500">No documents uploaded yet</p>';
      return;
    }
    
    documents.forEach(doc => {
      const docCard = document.createElement('div');
      docCard.className = 'bg-gray-50 p-4 rounded';
      docCard.innerHTML = `
        <div class="flex justify-between items-start">
          <div>
            <h3 class="font-semibold">${doc.originalName}</h3>
            <p class="text-sm text-gray-600">Uploaded: ${new Date(doc.uploadedAt).toLocaleDateString()}</p>
            <p class="text-sm text-gray-600">Type: ${doc.type}</p>
            ${doc.endorsedBy ? `
              <p class="text-sm text-green-600">
                Endorsed by Dr. ${doc.endorsedBy.displayName} on 
                ${new Date(doc.endorsedAt).toLocaleDateString()}
              </p>
            ` : ''}
            ${doc.flaggedBy ? `
              <p class="text-sm text-yellow-600">
                Flagged by Dr. ${doc.flaggedBy.displayName} on 
                ${new Date(doc.flaggedAt).toLocaleDateString()}
              </p>
            ` : ''}
          </div>
          <div class="flex space-x-2">
            <button onclick="viewDocument('${doc.id}')" 
                    class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
              View
            </button>
            <button onclick="downloadDocument('${doc.id}')" 
                    class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
              Download
            </button>
            <button onclick="deleteDocument('${doc.id}')" 
                    class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
              Delete
            </button>
          </div>
        </div>
      `;
      documentsList.appendChild(docCard);
    });
  } catch (error) {
    console.error('Error loading documents:', error);
    alert('Error loading documents. Please try again.');
  }
}

// Function to view a document
async function viewDocument(docId) {
  try {
    const response = await fetch(`/api/documents/${docId}`);
    const doc = await response.json();
    window.open(doc.url, '_blank');
  } catch (error) {
    console.error('Error viewing document:', error);
    alert('Error viewing document. Please try again.');
  }
}

// Function to download a document
async function downloadDocument(docId) {
  try {
    const response = await fetch(`/api/documents/${docId}/download`);
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = response.headers.get('Content-Disposition').split('filename=')[1];
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  } catch (error) {
    console.error('Error downloading document:', error);
    alert('Error downloading document. Please try again.');
  }
}

// Function to delete a document
async function deleteDocument(docId) {
  if (!confirm('Are you sure you want to delete this document?')) return;
  
  try {
    const response = await fetch(`/api/documents/${docId}`, {
      method: 'DELETE'
    });
    
    if (response.ok) {
      loadDocuments();
    } else {
      throw new Error('Failed to delete document');
    }
  } catch (error) {
    console.error('Error deleting document:', error);
    alert('Error deleting document. Please try again.');
  }
}

// Handle document search and filtering
documentSearch.addEventListener('input', filterDocuments);
documentFilter.addEventListener('change', filterDocuments);

function filterDocuments() {
  const searchTerm = documentSearch.value.toLowerCase();
  const filterValue = documentFilter.value;
  const docCards = documentsList.querySelectorAll('.bg-gray-50');
  
  docCards.forEach(card => {
    const docName = card.querySelector('h3').textContent.toLowerCase();
    const isEndorsed = card.querySelector('.text-green-600') !== null;
    const isFlagged = card.querySelector('.text-yellow-600') !== null;
    
    const matchesSearch = docName.includes(searchTerm);
    const matchesFilter = filterValue === 'all' || 
                         (filterValue === 'endorsed' && isEndorsed) ||
                         (filterValue === 'flagged' && isFlagged);
    
    card.style.display = matchesSearch && matchesFilter ? 'block' : 'none';
  });
}
</script> 