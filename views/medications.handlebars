<!-- Medications Page -->
<div class="container px-4 py-8 mx-auto max-w-7xl">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">My Medications</h1>
        <p class="mt-2 text-lg text-gray-600">View all medications extracted from your medical documents.</p>
    </div>

    <!-- Main Content -->
    <div class="bg-white p-6 rounded-lg shadow">
        <!-- Medication List -->
        <div id="medication-list" class="space-y-6">
            <!-- Loading Placeholder -->
            <div id="loading-placeholder" class="py-10 text-center">
                <div class="inline-block animate-spin h-8 w-8 border-4 border-gray-200 rounded-full border-t-health-500"></div>
                <p class="mt-4 text-gray-600">Loading your medications...</p>
            </div>
            
            <!-- Empty State -->
            <div id="empty-state" class="hidden py-10 text-center">
                <svg class="w-16 h-16 mx-auto text-gray-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                </svg>
                <h3 class="mt-4 text-lg font-medium text-gray-900">No medications found</h3>
                <p class="mt-2 text-gray-600">Medications will appear here after processing your medical documents.</p>
                <a href="/dashboard" class="mt-4 inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-health-600 border border-transparent rounded-md shadow-sm hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-health-500">
                    Go to Dashboard
                </a>
            </div>
            
            <!-- Medication Cards -->
            <div id="medication-cards" class="hidden">
                <!-- Filter and Sort Controls -->
                <div class="mb-6 flex items-center justify-between">
                    <div class="flex space-x-4">
                        <select id="document-type-filter" class="rounded-md border-gray-300 shadow-sm focus:border-health-500 focus:ring focus:ring-health-500 focus:ring-opacity-50">
                            <option value="all">All Document Types</option>
                            <option value="PRESCRIPTION">Prescriptions</option>
                            <option value="LAB_REPORT">Lab Reports</option>
                            <option value="CLINICAL_NOTES">Clinical Notes</option>
                            <option value="INSURANCE">Insurance</option>
                            <option value="MISCELLANEOUS">Other</option>
                        </select>
                    </div>
                    <div>
                        <input id="medication-search" type="text" placeholder="Search medications..." class="rounded-md border-gray-300 shadow-sm focus:border-health-500 focus:ring focus:ring-health-500 focus:ring-opacity-50">
                    </div>
                </div>
                
                <!-- Medication Grid -->
                <div id="medications-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Medication cards will be inserted here by JS -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Medication Template -->
<template id="medication-card-template">
    <div class="medication-card bg-blue-50 p-4 rounded-lg border border-blue-100">
        <div class="flex items-start justify-between">
            <h3 class="medication-name text-lg font-semibold text-gray-900"></h3>
            <span class="document-type px-2 py-1 text-xs font-medium rounded-full"></span>
        </div>
        <div class="mt-3 grid grid-cols-1 gap-2">
            <p class="dosage"><span class="font-medium">Dosage:</span> <span class="dosage-value"></span></p>
            <p class="frequency"><span class="font-medium">Frequency:</span> <span class="frequency-value"></span></p>
            <p class="purpose"><span class="font-medium">Purpose:</span> <span class="purpose-value"></span></p>
        </div>
        <div class="mt-3">
            <p class="instructions text-sm text-gray-700"><span class="font-medium">Instructions:</span> <span class="instructions-value"></span></p>
        </div>
        <div class="mt-3">
            <p class="warnings text-sm text-red-600 hidden"><span class="font-medium">Warnings:</span> <span class="warnings-value"></span></p>
        </div>
        <div class="mt-4 pt-3 border-t border-blue-100 text-xs text-gray-500">
            From <span class="document-name font-medium"></span>
        </div>
    </div>
</template>

<!-- JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const medicationList = document.getElementById('medication-list');
        const loadingPlaceholder = document.getElementById('loading-placeholder');
        const emptyState = document.getElementById('empty-state');
        const medicationCards = document.getElementById('medication-cards');
        const medicationsContainer = document.getElementById('medications-container');
        const medicationTemplate = document.getElementById('medication-card-template');
        const documentTypeFilter = document.getElementById('document-type-filter');
        const medicationSearch = document.getElementById('medication-search');
        
        let allMedications = [];
        
        // Fetch user's medications
        try {
            const response = await fetch('/api/documents/medications');
            if (!response.ok) {
                throw new Error('Failed to fetch medications');
            }
            
            const data = await response.json();
            
            if (data.success && data.medications) {
                allMedications = data.medications;
                
                // Hide loading and show content
                loadingPlaceholder.classList.add('hidden');
                
                if (allMedications.length === 0) {
                    emptyState.classList.remove('hidden');
                } else {
                    medicationCards.classList.remove('hidden');
                    renderMedications(allMedications);
                }
            } else {
                throw new Error('Invalid response data');
            }
        } catch (error) {
            console.error('Error fetching medications:', error);
            loadingPlaceholder.classList.add('hidden');
            emptyState.classList.remove('hidden');
        }
        
        // Render medications to the page
        function renderMedications(medications) {
            medicationsContainer.innerHTML = '';
            
            if (medications.length === 0) {
                medicationCards.classList.add('hidden');
                emptyState.classList.remove('hidden');
                return;
            }
            
            medicationCards.classList.remove('hidden');
            emptyState.classList.add('hidden');
            
            medications.forEach(med => {
                const card = document.importNode(medicationTemplate.content, true);
                
                // Set medication data
                card.querySelector('.medication-name').textContent = med.name || 'Unnamed Medication';
                
                // Set document type badge
                const docTypeBadge = card.querySelector('.document-type');
                docTypeBadge.textContent = med.documentType || 'Unknown';
                
                // Set badge color based on document type
                switch (med.documentType) {
                    case 'PRESCRIPTION':
                        docTypeBadge.classList.add('bg-green-100', 'text-green-800');
                        break;
                    case 'LAB_REPORT':
                        docTypeBadge.classList.add('bg-blue-100', 'text-blue-800');
                        break;
                    case 'CLINICAL_NOTES':
                        docTypeBadge.classList.add('bg-purple-100', 'text-purple-800');
                        break;
                    case 'INSURANCE':
                        docTypeBadge.classList.add('bg-yellow-100', 'text-yellow-800');
                        break;
                    default:
                        docTypeBadge.classList.add('bg-gray-100', 'text-gray-800');
                        break;
                }
                
                // Set other medication details
                card.querySelector('.dosage-value').textContent = med.dosage || 'Not specified';
                card.querySelector('.frequency-value').textContent = med.frequency || 'Not specified';
                card.querySelector('.purpose-value').textContent = med.purpose || 'Not specified';
                card.querySelector('.instructions-value').textContent = med.instructions || 'None provided';
                
                // Show warnings if they exist
                if (med.warnings) {
                    card.querySelector('.warnings').classList.remove('hidden');
                    card.querySelector('.warnings-value').textContent = med.warnings;
                }
                
                // Set document name
                card.querySelector('.document-name').textContent = med.documentName || 'Unknown Document';
                
                medicationsContainer.appendChild(card);
            });
        }
        
        // Handle document type filtering
        documentTypeFilter.addEventListener('change', function() {
            const filterValue = this.value;
            
            let filteredMeds = allMedications;
            
            if (filterValue !== 'all') {
                filteredMeds = allMedications.filter(med => med.documentType === filterValue);
            }
            
            // Apply search filter too
            const searchValue = medicationSearch.value.toLowerCase();
            if (searchValue) {
                filteredMeds = filteredMeds.filter(med => 
                    (med.name && med.name.toLowerCase().includes(searchValue)) ||
                    (med.purpose && med.purpose.toLowerCase().includes(searchValue))
                );
            }
            
            renderMedications(filteredMeds);
        });
        
        // Handle medication search
        medicationSearch.addEventListener('input', function() {
            const searchValue = this.value.toLowerCase();
            const filterValue = documentTypeFilter.value;
            
            let filteredMeds = allMedications;
            
            // Apply document type filter
            if (filterValue !== 'all') {
                filteredMeds = filteredMeds.filter(med => med.documentType === filterValue);
            }
            
            // Apply search filter
            if (searchValue) {
                filteredMeds = filteredMeds.filter(med => 
                    (med.name && med.name.toLowerCase().includes(searchValue)) ||
                    (med.purpose && med.purpose.toLowerCase().includes(searchValue))
                );
            }
            
            renderMedications(filteredMeds);
        });
    });
</script> 