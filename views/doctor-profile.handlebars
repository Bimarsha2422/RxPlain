{{!-- Doctor Profile --}}
<div class="max-w-4xl mx-auto">
    {{#if doctor}}
    {{!-- View of another doctor's profile --}}
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-8">
            <h2 class="text-2xl font-semibold mb-6">Doctor Profile</h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <p class="text-sm font-medium text-gray-700 mb-1">Full Name</p>
                    <p class="text-lg">Dr. {{doctor.displayName}}</p>
                </div>
                
                <div>
                    <p class="text-sm font-medium text-gray-700 mb-1">Specialization</p>
                    <p class="text-lg">{{doctor.specialization}}</p>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <p class="text-sm font-medium text-gray-700 mb-1">License Number</p>
                    <p class="text-lg">{{doctor.licenseNumber}}</p>
                </div>
                
                {{#if doctor.phone}}
                <div>
                    <p class="text-sm font-medium text-gray-700 mb-1">Contact Phone</p>
                    <p class="text-lg">{{doctor.phone}}</p>
                </div>
                {{/if}}
            </div>
            
            {{!-- Connection status and actions --}}
            <div class="mt-8 pt-6 border-t border-gray-200">
                <div class="flex justify-between items-center">
                    <div>
                        {{#if isConnected}}
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                            <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            Connected
                        </span>
                        {{else if connectionRequest}}
                            {{#if (eq connectionRequest.senderId user.uid)}}
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                                <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                Connection Request Sent
                            </span>
                            {{else}}
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                                <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                                </svg>
                                Connection Request Received
                            </span>
                            {{/if}}
                        {{else}}
                            {{!-- No connection yet --}}
                            <button onclick="sendConnectionRequest('{{doctor.id}}')" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-health-600 hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-health-500">
                                <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                                </svg>
                                Connect with Doctor
                            </button>
                        {{/if}}
                    </div>

                    <a href="/dashboard" class="text-health-600 hover:text-health-800">Back to Dashboard</a>
                </div>
            </div>
        </div>
    </div>
    {{else}}
    {{!-- Doctor viewing their own profile --}}
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-8">
            <h2 class="text-2xl font-semibold mb-6">My Profile</h2>
            
            <form id="profile-form">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                        <input type="text" id="name" name="name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.displayName}}" required>
                    </div>
                    
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                        <input type="email" id="email" name="email" class="w-full px-3 py-2 border border-gray-300 bg-gray-100 rounded-md" value="{{user.email}}" readonly>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label for="specialization" class="block text-sm font-medium text-gray-700 mb-1">Specialization</label>
                        <input type="text" id="specialization" name="specialization" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.specialization}}" required>
                    </div>
                    
                    <div>
                        <label for="license-number" class="block text-sm font-medium text-gray-700 mb-1">License Number</label>
                        <input type="text" id="license-number" name="licenseNumber" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.licenseNumber}}" required>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number (Optional)</label>
                        <input type="tel" id="phone" name="phone" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.phone}}">
                    </div>
                    
                    <div>
                        <label for="birthdate" class="block text-sm font-medium text-gray-700 mb-1">Date of Birth (Optional)</label>
                        <input type="date" id="birthdate" name="birthdate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" value="{{user.birthdate}}">
                    </div>
                </div>
                
                <div id="success-message" class="mb-4 text-green-600 text-sm hidden">Profile updated successfully!</div>
                <div id="error-message" class="mb-4 text-red-600 text-sm hidden"></div>
                
                <div class="flex justify-end">
                    <button type="submit" class="bg-health-600 text-white py-2 px-6 rounded-md hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-health-500 focus:ring-offset-2">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    
    <div class="bg-white rounded-xl shadow-md overflow-hidden mt-8">
        <div class="p-8">
            <h2 class="text-2xl font-semibold mb-6">Password Change</h2>
            
            <form id="password-form">
                <div class="grid grid-cols-1 gap-6 mb-6">
                    <div>
                        <label for="current-password" class="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
                        <input type="password" id="current-password" name="currentPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                    
                    <div>
                        <label for="new-password" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                        <input type="password" id="new-password" name="newPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                    
                    <div>
                        <label for="confirm-new-password" class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                        <input type="password" id="confirm-new-password" name="confirmNewPassword" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
                    </div>
                </div>
                
                <div id="password-success-message" class="mb-4 text-green-600 text-sm hidden">Password updated successfully!</div>
                <div id="password-error-message" class="mb-4 text-red-600 text-sm hidden"></div>
                
                <div class="flex justify-end">
                    <button type="submit" class="bg-health-600 text-white py-2 px-6 rounded-md hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-health-500 focus:ring-offset-2">Update Password</button>
                </div>
            </form>
        </div>
    </div>
    {{/if}}
</div>

{{#if doctor}}
{{!-- Script for viewing another doctor's profile --}}
<script>
// Function to send connection request to the doctor
async function sendConnectionRequest(doctorId) {
    try {
        const response = await fetch('/api/users/connections/request', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                receiverId: doctorId
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            Swal.fire({
                title: 'Request Sent!',
                text: 'Connection request has been sent to the doctor.',
                icon: 'success',
                confirmButtonText: 'OK',
                confirmButtonColor: '#16a34a'
            }).then(() => {
                // Reload the page to update the button status
                window.location.reload();
            });
        } else {
            throw new Error(result.error || 'Failed to send connection request');
        }
    } catch (error) {
        console.error('Error sending connection request:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to send connection request. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK',
            confirmButtonColor: '#16a34a'
        });
    }
}
</script>
{{else}}
{{!-- Script for doctor editing their own profile --}}
<script type="module">
    import { getAuth, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from 'https://www.gstatic.com/firebasejs/10.8.0/firebase-auth.js';
    
    // Fetch user profile data when the page loads
    window.addEventListener('load', () => {
        window.fetchUserProfile();
    });
    
    // Profile Update Form
    const profileForm = document.getElementById('profile-form');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    
    profileForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const name = document.getElementById('name').value;
        const specialization = document.getElementById('specialization').value;
        const licenseNumber = document.getElementById('license-number').value;
        const phone = document.getElementById('phone').value;
        const birthdate = document.getElementById('birthdate').value;
        
        try {
            await window.updateProfile(name, phone, birthdate, specialization, licenseNumber);
            successMessage.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            
            // Hide success message after 3 seconds
            setTimeout(() => {
                successMessage.classList.add('hidden');
            }, 3000);
        } catch (error) {
            errorMessage.textContent = error.message;
            errorMessage.classList.remove('hidden');
            successMessage.classList.add('hidden');
        }
    });
    
    // Password Change Form
    const passwordForm = document.getElementById('password-form');
    const passwordSuccessMessage = document.getElementById('password-success-message');
    const passwordErrorMessage = document.getElementById('password-error-message');
    
    passwordForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const currentPassword = document.getElementById('current-password').value;
        const newPassword = document.getElementById('new-password').value;
        const confirmNewPassword = document.getElementById('confirm-new-password').value;
        
        // Validate passwords
        if (newPassword !== confirmNewPassword) {
            passwordErrorMessage.textContent = "New passwords don't match";
            passwordErrorMessage.classList.remove('hidden');
            return;
        }
        
        if (newPassword.length < 6) {
            passwordErrorMessage.textContent = "Password must be at least 6 characters";
            passwordErrorMessage.classList.remove('hidden');
            return;
        }
        
        try {
            const auth = getAuth();
            const user = auth.currentUser;
            
            if (!user) {
                // Not logged in
                window.location.href = '/login';
                return;
            }
            
            // Re-authenticate user before changing password
            const credential = EmailAuthProvider.credential(user.email, currentPassword);
            await reauthenticateWithCredential(user, credential);
            
            // Update password
            await updatePassword(user, newPassword);
            
            // Success
            passwordSuccessMessage.classList.remove('hidden');
            passwordErrorMessage.classList.add('hidden');
            passwordForm.reset();
            
            // Hide success message after 3 seconds
            setTimeout(() => {
                passwordSuccessMessage.classList.add('hidden');
            }, 3000);
        } catch (error) {
            passwordErrorMessage.textContent = error.message;
            passwordErrorMessage.classList.remove('hidden');
            passwordSuccessMessage.classList.add('hidden');
        }
    });
</script>
{{/if}}