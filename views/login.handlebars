<div class="max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden mt-10">
    <div class="p-8">
        <div class="text-center mb-8">
            <h2 class="text-2xl font-bold text-gray-800">Welcome Back</h2>
            <p class="text-gray-600">Sign in to access your medical documents</p>
        </div>
        
        {{#if forceLogout}}
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
            <p class="font-bold">Session Cleared</p>
            <p>Your session has been forcefully reset due to authentication issues.</p>
        </div>
        <input type="hidden" id="force-logout" value="true">
        {{/if}}
        
        {{#if redirectAttempt}}
        <input type="hidden" id="redirect-attempt" value="{{redirectAttempt}}">
        {{/if}}
        
        <form id="login-form">
            <div class="mb-4">
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                <input type="email" id="email" name="email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
            </div>
            
            <div class="mb-6">
                <div class="flex items-center justify-between mb-1">
                    <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                    <a href="/forgot-password" class="text-sm text-health-600 hover:underline">Forgot password?</a>
                </div>
                <input type="password" id="password" name="password" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-health-500 focus:border-transparent" required>
            </div>
            
            <div id="error-message" class="mb-4 text-red-600 text-sm hidden"></div>
            
            <button type="submit" class="w-full bg-health-600 text-white py-2 px-4 rounded-md hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-health-500 focus:ring-offset-2">Sign In</button>
        </form>
        
        <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">Don't have an account? <a href="/register" class="text-health-600 hover:underline">Sign up</a></p>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Check for force logout and clear everything
        const forceLogoutElem = document.getElementById('force-logout');
        if (forceLogoutElem) {
            console.log('Force logout detected - clearing all authentication state');
            clearAllAuthState();
        } else {
            // Check for redirect loop and clear cached state if detected
            const redirectAttemptElem = document.getElementById('redirect-attempt');
            if (redirectAttemptElem && parseInt(redirectAttemptElem.value) > 1) {
                console.log('Multiple redirects detected, clearing cached state');
                clearCachedState();
            }
        }
        
        // More aggressive auth clearing
        function clearAllAuthState() {
            try {
                // Clear session storage
                sessionStorage.clear();
                
                // Clear all firebase and auth related localStorage
                const authPrefixes = ['firebase:', 'firebaseui:', 'session', 'auth', 'user', 'token'];
                Object.keys(localStorage).forEach(key => {
                    for (const prefix of authPrefixes) {
                        if (key.toLowerCase().includes(prefix)) {
                            console.log('Clearing storage item:', key);
                            localStorage.removeItem(key);
                        }
                    }
                });
                
                // Clear any service workers that might be caching auth state
                if ('serviceWorker' in navigator) {
                    navigator.serviceWorker.getRegistrations().then(registrations => {
                        for (let registration of registrations) {
                            registration.unregister();
                            console.log('Unregistered service worker');
                        }
                    });
                }
                
                // Clear browser cache for this site if possible
                if (window.caches) {
                    window.caches.keys().then(keyList => {
                        return Promise.all(keyList.map(key => {
                            console.log('Clearing cache:', key);
                            return caches.delete(key);
                        }));
                    });
                }
                
                // Clear any IndexedDB databases (Firebase uses these)
                if (window.indexedDB) {
                    const databases = indexedDB.databases ? indexedDB.databases() : Promise.resolve([]);
                    databases.then(dbs => {
                        dbs.forEach(db => {
                            console.log('Deleting IndexedDB:', db.name);
                            indexedDB.deleteDatabase(db.name);
                        });
                    }).catch(err => {
                        console.warn('Error clearing IndexedDB:', err);
                    });
                }
            } catch (e) {
                console.warn('Error during complete auth clearing:', e);
            }
        }
        
        // Less aggressive clearing for normal redirect issues
        const clearCachedState = () => {
            try {
                // Clear any persistent data that might interfere with login
                sessionStorage.clear();
                
                // Force clear auth-related localStorage items
                const authPrefixes = ['firebase:authUser', 'firebase:'];
                Object.keys(localStorage).forEach(key => {
                    for (const prefix of authPrefixes) {
                        if (key.startsWith(prefix)) {
                            console.log('Clearing cached auth data:', key);
                            localStorage.removeItem(key);
                        }
                    }
                });
            } catch (e) {
                console.warn('Error clearing cache:', e);
            }
        };
    });

    const loginForm = document.getElementById('login-form');
    const errorMessage = document.getElementById('error-message');
    
    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        
        // Clear any error messages
        errorMessage.classList.add('hidden');
        errorMessage.textContent = '';
        
        // Disable form to prevent multiple submissions
        const submitButton = loginForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = 'Signing in...';
        
        try {
            // Call the login function from firebase-client.js
            if (!window.login) {
                throw new Error('Login functionality not available. Please reload the page.');
            }
            
            const result = await window.login(email, password);
            
            if (result && !result.success) {
                errorMessage.textContent = result.error;
                errorMessage.classList.remove('hidden');
                submitButton.disabled = false;
                submitButton.textContent = 'Sign In';
            } else if (result && result.success) {
                // If login was successful, redirect to dashboard
                window.location.href = '/dashboard';
            }
        } catch (error) {
            console.error('Login error:', error);
            errorMessage.textContent = error.message || 'An error occurred during login. Please try again.';
            errorMessage.classList.remove('hidden');
            submitButton.disabled = false;
            submitButton.textContent = 'Sign In';
        }
    });
</script>