<!-- Reports Page with Improved UI -->
<div class="container px-4 py-8 mx-auto max-w-7xl">
    <!-- Header -->
    <div class="mb-8 flex flex-col md:flex-row md:items-center md:justify-between">
        <div>
            <h1 class="text-4xl font-bold text-gray-900 tracking-tight">Your Medical Reports</h1>
            <p class="mt-2 text-xl text-gray-600">Combined insights from your medical documents</p>
        </div>
        <div class="mt-4 md:mt-0">
            <a href="/dashboard" id="create-report-btn" class="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-health-600 rounded-md shadow-sm hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-health-500 transition duration-150 ease-in-out">
                <svg class="w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Create New Report
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100">
        <!-- Reports List -->
        <div id="reports-list" class="divide-y divide-gray-200">
            <!-- Loading State -->
            <div id="loading-placeholder" class="py-20 text-center">
                <div class="inline-block animate-spin h-10 w-10 border-4 border-gray-200 rounded-full border-t-health-500"></div>
                <p class="mt-4 text-lg text-gray-600">Loading your medical reports...</p>
            </div>
            
            <!-- Empty State -->
            <div id="empty-state" class="hidden py-20 text-center">
                <div class="mx-auto w-24 h-24 rounded-full bg-health-50 flex items-center justify-center">
                    <svg class="w-12 h-12 text-health-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                </div>
                <h3 class="mt-6 text-xl font-medium text-gray-900">No reports yet</h3>
                <p class="mt-2 text-gray-600 max-w-md mx-auto">Create your first combined report by selecting multiple documents from your dashboard.</p>
                <a href="/dashboard" class="mt-6 inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-health-600 hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-health-500 transition duration-150 ease-in-out">
                    Go to Dashboard
                </a>
            </div>
            
            <!-- Reports Grid -->
            <div id="reports-container" class="hidden p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Report cards will be inserted here by JS -->
            </div>
        </div>
    </div>
</div>

<!-- Report Card Template -->
<template id="report-card-template">
    <div class="report-card bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden flex flex-col h-full">
        <div class="p-6 flex-grow">
            <h3 class="report-title text-xl font-bold text-gray-900 mb-2"></h3>
            <p class="report-date text-sm text-gray-500 mb-4"></p>
            
            <div class="flex items-center mb-4">
                <div class="bg-health-100 text-health-800 rounded-full px-3 py-1 text-xs font-medium inline-flex items-center">
                    <svg class="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <span class="report-documents"></span>
                </div>
                
                <div class="bg-green-100 text-green-800 rounded-full px-3 py-1 text-xs font-medium inline-flex items-center ml-2">
                    <svg class="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                    </svg>
                    <span class="report-medications"></span>
                </div>
            </div>
            
            <div class="report-documents-list mt-3">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Source Documents:</h4>
                <div class="document-badges flex flex-wrap gap-2">
                    <!-- Document badges will be inserted here by JS -->
                </div>
            </div>
        </div>
        
        <div class="p-4 bg-gray-50 border-t border-gray-200">
            <a href="#" class="view-report-btn inline-flex w-full items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-health-600 hover:bg-health-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-health-500 transition-colors duration-150 ease-in-out">
                View Full Report
            </a>
        </div>
    </div>
</template>

<!-- JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const reportsList = document.getElementById('reports-list');
        const loadingPlaceholder = document.getElementById('loading-placeholder');
        const emptyState = document.getElementById('empty-state');
        const reportsContainer = document.getElementById('reports-container');
        const reportTemplate = document.getElementById('report-card-template');
        
        // Fetch user's reports
        try {
            const response = await fetch('/api/documents/reports');
            if (!response.ok) {
                throw new Error('Failed to fetch reports');
            }
            
            const data = await response.json();
            
            if (data.success && data.reports) {
                const reports = data.reports;
                
                // Hide loading and show content
                loadingPlaceholder.classList.add('hidden');
                
                if (reports.length === 0) {
                    emptyState.classList.remove('hidden');
                } else {
                    reportsContainer.classList.remove('hidden');
                    renderReports(reports);
                }
            } else {
                throw new Error('Invalid response data');
            }
        } catch (error) {
            console.error('Error fetching reports:', error);
            loadingPlaceholder.classList.add('hidden');
            emptyState.classList.remove('hidden');
        }
        
        // Render reports to the page
        function renderReports(reports) {
            reportsContainer.innerHTML = '';
            
            if (reports.length === 0) {
                reportsContainer.classList.add('hidden');
                emptyState.classList.remove('hidden');
                return;
            }
            
            reportsContainer.classList.remove('hidden');
            emptyState.classList.add('hidden');
            
            reports.forEach(report => {
                const card = document.importNode(reportTemplate.content, true);
                
                // Set report data
                card.querySelector('.report-title').textContent = report.title || 'Untitled Report';
                
                // Format creation date with error handling
                let createdDate = 'Date unavailable';
                try {
                    if (report.createdAt) {
                        const date = new Date(report.createdAt);
                        // Verify the date is valid
                        if (!isNaN(date.getTime())) {
                            createdDate = date.toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                        }
                    }
                } catch (e) {
                    console.warn('Error formatting date:', e);
                }
                card.querySelector('.report-date').textContent = `Created on ${createdDate}`;
                
                // Document count
                const docCount = report.sourceDocuments ? report.sourceDocuments.length : 0;
                card.querySelector('.report-documents').textContent = `${docCount} document${docCount !== 1 ? 's' : ''}`;
                
                // Medication count
                const medCount = report.medications ? report.medications.length : 0;
                card.querySelector('.report-medications').textContent = `${medCount} medication${medCount !== 1 ? 's' : ''}`;
                
                // Add document badges
                const docBadgesContainer = card.querySelector('.document-badges');
                if (report.documentNames && report.documentNames.length > 0) {
                    report.documentNames.forEach(docName => {
                        const badge = document.createElement('span');
                        badge.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800';
                        badge.textContent = docName.length > 25 ? docName.substring(0, 22) + '...' : docName;
                        docBadgesContainer.appendChild(badge);
                    });
                }
                
                // Set view link
                const viewBtn = card.querySelector('.view-report-btn');
                viewBtn.href = `/reports/${report.id}`;
                
                reportsContainer.appendChild(card);
            });
        }
    });